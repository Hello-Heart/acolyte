package acolyte;

import java.util.List;

import java.sql.SQLException;
import java.sql.ResultSet;

import org.apache.commons.lang3.tuple.ImmutablePair;

import acolyte.ParameterMetaData.Parameter;

/**
 * Statement handler: allow to process statement by 'hand' and return.
 *
 * @author Cedric Chantepie
 */
public interface StatementHandler {
    /**
     * When given |sql| query is executed against Acolyte connection ...
     *
     * @param sql SQL query (with '?' for prepared/callable statement)
     * @param parameters Parameters (or empty map if none)
     * @return Query result set
     */
    public ResultSet whenSQLQuery(String sql, List<ImmutablePair<Parameter,Object>> parameters) throws SQLException;

    /**
     * When given |sql| update is executed against Acolyte connection ...
     *
     * @param sql SQL query (with '?' for prepared/callable statement)
     * @param parameters Parameters (or empty map if none)
     * @return Row count
     */
    public int whenSQLUpdate(String sql, List<ImmutablePair<Parameter,Object>> parameters) throws SQLException;

    /**
     * If statement is neither a PreparedStatement nor a CallbableStatement,
     * determines whether given |sql| is a query.
     *
     * If returns true, whenSQLQuery will be called.
     */
    public boolean isQuery(String sql);

    /**
     * Returns keys generated by last execution.
     * FOR FUTURE USE.
     */
    public ResultSet getGeneratedKeys();

} // end of interface StatementHandler
